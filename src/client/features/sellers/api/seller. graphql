type Seller {
  id: ID!
  firstName: String!
  middleName: String!
  lastName: String!
  phone: Phone!
  post: Post!
  seniorityType: SeniorityType!
  recruitedAt: Day
  dismissAt: Day
  deletedAt: Day
  state: SellerState!
  appointments: [Appointment!]!
}

type Appointment {
  post: Post!
  day: Day!
}

enum SellerState {
  NEW
  RECRUITED
  DISMISS
  DELETED
}

type Query {
  getSellers: [Seller!]!
  getSeller(id: ID!): Seller!
}

type Mutation {
  createSeller(id: ID!): Seller!
  updateSeller(seller: SellerInput!): Seller!
  deleteSeller(id: ID!): Boolean!
  restoreSeller(id: ID!): Boolean!
  eraseSeller(id: ID!): Boolean!
  addAppointment(id: ID!, post: Post!, day: Day!): Seller!
  deleteAppointmentAt(id: ID!, day: Day!): Seller!
  updateAppointmentTo(id: ID!, day: Day!, newPost: Post!, newDay: Day!): Seller!
  dismissAt(id: ID!, day: Day!): Seller!
  deleteDismiss(id: ID!, day: Day!): Seller!
  updateDismissTo(id: ID!, day: Day!, newDay: Day!): Seller!
}
