### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


input AppointmentInput {
  day: DateTimeScalar
  postId: ID
}

input AwardInput {
  day: DateTimeScalar
  value: PositiveFloatScalar
}

interface ConnectionInterface {
  edges: [EdgeInterface!]!
  pageInfo: PageInfo!
}

scalar CursorScalar

scalar DateTimeScalar

"""Day custom scalar type"""
scalar DayScalar

"""States of deletable entities"""
enum DeletableEntityStateEnum {
  ACTIVE
  DELETED
}

interface EdgeInterface {
  cursor: CursorScalar!
  node: NodeInterface!
}

input FilterFieldInput {
  name: String
  value: String
}

input FilterInput {
  fields: [FilterFieldInput!]
  text: String
}

type Mutation {
  createPost(pieceRate: PieceRateInput, post: PostInput!): Post!

  """Add pieceRate to post"""
  createPostPieceRate(id: ID!, pieceRate: PieceRateInput!): Post!
  createSeller(appointment: AppointmentInput, seller: SellerInput!): Seller!

  """Add appointment to seller"""
  createSellerAppointment(appointment: AppointmentInput!, id: ID!): Seller!
  createSeniorityType(award: AwardInput, seniorityType: SeniorityTypeInput!): SeniorityType!

  """Add award to seniorityType"""
  createSeniorityTypeAward(award: AwardInput!, id: ID!): SeniorityType!
  deletePost(id: ID!): Post!

  """Delete post's pieceRate at day"""
  deletePostPieceRateAt(day: DayScalar!, id: ID!): Post!
  deleteSeller(id: ID!): Seller!

  """Delete seller's appointment at day"""
  deleteSellerAppointmentAt(day: DayScalar!, id: ID!): Seller!

  """Delete seller's dismiss"""
  deleteSellerDismiss(id: ID!): Seller!
  deleteSeniorityType(id: ID!): SeniorityType!

  """Delete seniorityType's award at day"""
  deleteSeniorityTypeAwardAt(day: DayScalar!, id: ID!): SeniorityType!
  destroyPost(id: ID!): Post!
  destroySeller(id: ID!): Seller!
  destroySeniorityType(id: ID!): SeniorityType!

  """Dismiss seller at day"""
  dismissSellerAt(day: DayScalar, id: ID!): Seller!
  restorePost(id: ID!): Post!
  restoreSeller(id: ID!): Seller!
  restoreSeniorityType(id: ID!): SeniorityType!
  updatePost(id: ID!, post: PostInput!): Post!

  """Update post's pieceRate at day to new value and day"""
  updatePostPieceRateTo(day: DayScalar!, id: ID!, newPieceRate: PieceRateInput!): Post!
  updateSeller(id: ID!, seller: SellerInput!): Seller!

  """Update seller's appointment at day to new postId and day"""
  updateSellerAppointmentTo(day: DayScalar!, id: ID!, newAppointment: AppointmentInput!): Seller!

  """Update seller's dismiss to new day"""
  updateSellerDismissTo(day: DayScalar!, id: ID!): Seller!
  updateSeniorityType(id: ID!, seniorityType: SeniorityTypeInput!): SeniorityType!

  """Update seniorityType's award at day to new value and day"""
  updateSeniorityTypeAwardTo(day: DayScalar!, id: ID!, newAward: AwardInput!): SeniorityType!
}

interface NodeInterface {
  """Unique identifier for the resource"""
  id: ID!
}

"""Order values"""
enum OrderEnum {
  ASC
  DESC
}

type PageInfo {
  endCursor: CursorScalar!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: CursorScalar!
}

"""Percentage custom scalar type"""
scalar PercentageScalar

"""Phone number scalar type"""
scalar PhoneScalar

input PieceRateInput {
  day: DateTimeScalar
  value: PercentageScalar
}

"""Positive float with two digit after point custom scalar type"""
scalar PositiveFloatScalar

"""PositiveInt custom scalar type"""
scalar PositiveIntScalar

type Post implements NodeInterface & TimestampsInterface {
  createdAt: DateTimeScalar!
  deletedAt: DateTimeScalar

  """Unique identifier for the resource"""
  id: ID!
  name: String!
  pieceRate: PositiveFloatScalar
  pieceRates: [PostPieceRate!]!
  state: DeletableEntityStateEnum!
  updatedAt: DateTimeScalar
}

type PostConnection implements ConnectionInterface {
  edges: [PostEdge!]!
  pageInfo: PageInfo!
}

type PostEdge implements EdgeInterface {
  cursor: CursorScalar!
  node: Post!
}

input PostInput {
  name: String
}

"""Piece rate of post"""
type PostPieceRate {
  day: DayScalar!
  value: PositiveFloatScalar!
}

type Query {
  node(cursor: CursorScalar!): NodeInterface!
  post(id: ID!): Post!
  posts(after: CursorScalar, before: CursorScalar, filter: FilterInput, first: PositiveIntScalar, last: PositiveIntScalar, sort: SortInput): PostConnection!
  seller(id: ID!): Seller!
  sellers(after: CursorScalar, before: CursorScalar, filter: FilterInput, first: PositiveIntScalar, last: PositiveIntScalar, sort: SortInput): SellerConnection!
  seniorityType(id: ID!): SeniorityType!
  seniorityTypes(after: CursorScalar, before: CursorScalar, filter: FilterInput, first: PositiveIntScalar, last: PositiveIntScalar, sort: SortInput): SeniorityTypeConnection!
}

type Seller implements NodeInterface & TimestampsInterface {
  appointments: [SellerAppontment!]!
  createdAt: DateTimeScalar!
  deletedAt: DateTimeScalar
  dismissDay: DayScalar
  firstName: String!

  """Unique identifier for the resource"""
  id: ID!
  lastName: String!
  middleName: String!
  phone: PhoneScalar
  post: Post
  postId: ID
  postIds: [ID!]!
  posts(after: CursorScalar, before: CursorScalar, filter: FilterInput, first: PositiveIntScalar, last: PositiveIntScalar, sort: SortInput): PostConnection!
  recruitDay: DayScalar
  seniority: PositiveIntScalar
  seniorityType: SeniorityType
  state: SellerStateEnum!
  updatedAt: DateTimeScalar
}

type SellerAppontment {
  day: DayScalar!
  post: Post!
  postId: ID!
}

type SellerConnection implements ConnectionInterface {
  edges: [SellerEdge!]!
  pageInfo: PageInfo!
}

type SellerEdge implements EdgeInterface {
  cursor: CursorScalar!
  node: Seller!
}

input SellerInput {
  firstName: String
  lastName: String
  middleName: String
  phone: PhoneScalar
}

"""Seller states"""
enum SellerStateEnum {
  DELETED
  DISMISSED
  NEW
  RECRUITED
}

type SeniorityType implements NodeInterface & TimestampsInterface {
  award: Float
  awards: [SeniorityTypeAward!]!
  createdAt: DateTimeScalar!
  deletedAt: DateTimeScalar

  """Unique identifier for the resource"""
  id: ID!
  months: Int
  name: String!
  state: DeletableEntityStateEnum!
  updatedAt: DateTimeScalar
}

"""SeniorityTypeAward for seniority"""
type SeniorityTypeAward {
  day: DayScalar!
  value: Float!
}

type SeniorityTypeConnection implements ConnectionInterface {
  edges: [SeniorityTypeEdge!]!
  pageInfo: PageInfo!
}

type SeniorityTypeEdge implements EdgeInterface {
  cursor: CursorScalar!
  node: SeniorityType!
}

input SeniorityTypeInput {
  months: PositiveIntScalar
  name: String
}

input SortInput {
  field: String
  order: OrderEnum
}

interface TimestampsInterface {
  createdAt: DateTimeScalar!
  deletedAt: DateTimeScalar
  updatedAt: DateTimeScalar
}
